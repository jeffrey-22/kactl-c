auto lexical_compare = [](int a, int b) { return to_string(a) < to_string(b); };
set<int, decltype(lexical_compare)> s;

echo "g++ -std=gnu++20 -x c++ -Wall -O2 -static -pipe -o \$1 \"\$1.cpp\" -lm" >> mygpp && chmod u+x mygpp
ulimit -s unlimited
g++ -Wall -Wextra -Wconversion -static -Wl,--stack=268435456 -O2 -std=c++20 <source>
Compile (F8): g++ -std=c++17 -Wshadow -Wall -o "%e" "%f" -O2 -Wno-unused-result
Build (F9): g++ -std=c++17 -Wshadow -Wall -o "%e" "%f" -g -fsanitize=address -fsanitize=undefined

int& dp (int idx) { // the '&' is very important!
  return dp_[ZERO + idx];
}

vector<int> v = { 1, 2, 3, 3, 3, 10, 1, 2, 3, 7, 7, 8 };
// Sorting the array
std::sort(v.begin(), v.end());
// Now v becomes 1 1 2 2 3 3 3 3 7 7 8 10
// Using std::unique
int n = std::unique(v.begin(), v.begin() + 12) - v.begin();
// Now v becomes {1 2 3 7 8 10 * * * * * *}
// * means undefined
// Resizing the vector so as to remove the undefined terms
v.resize(std::distance(v.begin(), v.begin() + n));

std::stringstream ss;
str = "100 200";
ss << str;
int foo,bar;
ss >> foo >> bar; // foo = 100, bar = 200

P's occurrences in fixed T: a range in the SA of T (can be further narrowed ch by ch);
Longest Common Prefix of s and t[i:]: Z Func of s + '$' + t;
# of ch matches of s and t[i:]: reverse s, PSc(x)=[str_i==c]x^i, FFT of PSc(x)*PTc(x);
Wildcard, P occurrences in T: sum_j{P[j]T[i+j](P[j]-T[i+j])^2}=0 to match at pos i. Expand then FFT.